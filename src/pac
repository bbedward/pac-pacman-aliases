#!/bin/bash

### pac - A wrapper for pacman, yay, and paru with apt-like usage and bash globbing pattern search instead of regex.


# Detect if paru or yay is installed and set the AUR_HELPER variable accordingly
AUR_HELPER=""
if command -v paru > /dev/null; then
    AUR_HELPER="paru"
elif command -v yay > /dev/null; then
    AUR_HELPER="yay"
fi

# To translate -y option to --noconfirm for pacman and yay
NOCONFIRM=""
AURNOCONFIRM=""

TEMP_ARGS=()
for arg in "$@"; do
    case $arg in
        -y)
            NOCONFIRM="--noconfirm"
            if [[ $AUR_HELPER == "paru" ]]; then
                AURNOCONFIRM="--noconfirm"
            else
                AURNOCONFIRM="--noconfirm --answerdiff None --answerclean None --mflags \"--noconfirm\""
            fi
            ;;
        *)
            TEMP_ARGS+=("$arg")
            ;;
    esac
done
set -- "${TEMP_ARGS[@]}"

# Prompt for sudo if not already root
SUDO=""
prompt_for_sudo() {
    if [[ $(id -u) -ne 0 ]]; then
        if [[ -n "$AURNOCONFIRM" ]]; then
            SUDO="sudo"
            # Ensure we have sudo privileges without user interaction
            if ! sudo -v; then
                echo "Failed to obtain sudo privileges."
                exit 1
            fi
            return # Skip the rest of the function
        fi
       SUDO="sudo"
        echo "This action requires root privileges. Do you want to proceed? (Y/n)"
        read -r answer
       case "${answer,,}" in
            y|yes|"")
                if ! sudo -v; then
                    echo "Failed to obtain sudo privileges."
                    exit 1
                fi
                ;;
            *)
                echo "Operation cancelled."
                exit 1
                ;;
        esac
    fi
}

# Print help
help() {
        cat <<EOF
Usage: pac <command> [options]

Commands:
    upgrade         Upgrade all installed packages
    install         Install a new package
    remove          Remove an installed package
    autoremove      Remove unneeded packages
    clean           Clean the package cache
    autoclean       Remove old versions of installed packages
    list-installed  List all installed packages
    search          Search the package database
    show            Show detailed package information
    find            Find a package by binary name
    aur search      Search in the AUR
    aur install     Install a package from the AUR
    aur upgrade     Upgrade AUR packages

Options:
    -y              Answer yes to all questions
EOF
}

if [[ "$1" == "--help" ]]; then
    help
    exit 0
fi

### Primary command handler
case "$1" in
    update)
        echo "Please use 'upgrade' instead of 'update'."
        echo "Partial updates are not recommended on arch-based systems."
        echo "See https://wiki.archlinux.org/title/System_maintenance#Partial_upgrades_are_unsupported"
        exit 1
    ;;
    upgrade)
        prompt_for_sudo
        $SUDO pacman -Syu $NOCONFIRM
    ;;
    install)
        shift
        prompt_for_sudo
        $SUDO pacman -S "$@" $NOCONFIRM
    ;;
    remove)
        shift
        prompt_for_sudo
        $SUDO pacman -R "$@" $NOCONFIRM
    ;;
    autoremove)
        prompt_for_sudo
        $SUDO pacman -Rs $(pacman -Qtdq) $NOCONFIRM
    ;;
    clean)
        prompt_for_sudo
        $SUDO pacman -Scc $NOCONFIRM
    ;;
    autoclean)
        prompt_for_sudo
        $SUDO pacman -Rns $(pacman -Qtdq $NOCONFIRM) $NOCONFIRM
    ;;
    list)
        if [[ "$2" == "--installed" ]]; then
            pacman -Q
        else
            echo "Unsupported list operation: $2"
            echo "Supported operations are: --installed"
            exit 1
        fi
    ;;
    search)
        shift
        local pattern=$(echo "$@" | sed 's/\*/.*/g;s/\?/./g')
        pacman -Ss "$pattern"
    ;;
    show)
        shift
        pacman -Si "$@"
    ;;
    find)
        shift
        pacman -F "$@"
    ;;
    aur|--aur)
        if [[ -z "$AUR_HELPER" ]]; then
            echo "No AUR helper found. Please install yay or paru."
            exit 1
        fi
        shift # Remove 'aur' from arguments
        case "$1" in
            search)
                shift
                $AUR_HELPER -Ssa "$@"
                ;;
            install)
                shift
                $AUR_HELPER -S "$@" $AURNOCONFIRM
                ;;
            upgrade)
                if [[ $AUR_HELPER == "paru" ]]; then
                    $AUR_HELPER -Sua $AURNOCONFIRM
                else
                    $AUR_HELPER $AURNOCONFIRM
                fi
                ;;
            *)
                echo "Invalid aur operation: $1"
                exit 1
                ;;
        esac
        ;;
    *)
        help
        exit 1
esac
